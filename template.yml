AWSTemplateFormatVersion: '2010-09-09'
Resources:
  TodoCreateTask:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Todo-CreateTask-POST
      Runtime: nodejs20.x
      Role: !GetAtt lambdaExecutionRole.Arn
      Handler: todo-task/dist/controller/createTask.handler
      Code:
        S3Bucket: todo-tasks
        S3Key: todo-task.zip 

  TodoTasksGET:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Todo-Tasks-GET 
      Runtime: nodejs20.x
      Role: !GetAtt lambdaExecutionRole.Arn
      Handler: todo-task/dist/controller/getTasks.handler
      Code:
        S3Bucket: todo-tasks
        S3Key: todo-task.zip

  TodoUpdateTask :
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Todo-UpdateTask-UPDATE 
      Runtime: nodejs20.x
      Role: !GetAtt lambdaExecutionRole.Arn
      Handler: todo-task/dist/controller/updateTask.handler
      Code:
        S3Bucket: todo-tasks
        S3Key: todo-task.zip  
  
  TodoDeleteTask:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Todo-DeleteTask-DELETE
      Runtime: nodejs20.x
      Role: !GetAtt lambdaExecutionRole.Arn
      Handler: todo-task/dist/controller/deleteTask.handler
      Code:
        S3Bucket: todo-tasks
        S3Key: todo-task.zip 
  
  lambdaExecutionRole:
    Type : AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaBasicExecution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  TodoApi:
    Type : AWS::ApiGateway::RestApi
    Properties :
      Name: TodoTaskApi
      Body :
        openapi: 3.0.0
        info:
          version: '1.0'
          title: Todo-task
          description: adding and revewing the tasks in the list
        paths: 
          /createTask:
            post:
              description: A task is adding to list.
              requestBody:
                required: true
                content:
                  application/vnd.api+json:
                    schema:
                      $ref: '#/components/schemas/AddTask'
              responses:
                "201":
                  description: task added successfully
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/AddTask' 
                "400":
                  description: cannot add the task
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/BadRequest'

              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoCreateTask.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  type: "aws_proxy"
          /tasks:
            get:
              description: A task is adding to list.
              responses:
                "200":
                  description: retrieved all tasks successfully
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/GetTask' 
                "400":
                  description: cannot get the tasks
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/BadRequest'

              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoTasksGET.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "GET"
                  type: "aws_proxy"

          /update-task:
            put:
              description: update a task in the list.
              requestBody:
                required: true
                content:
                  application/vnd.api+json:
                    schema:
                      $ref: '#/components/schemas/UpdateTask'
              responses:
                "200":
                  description: updated task successfully
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/UpdateTask'
                "400":
                  description: cannot updated the tasks
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/BadRequest'
                 
              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoUpdateTask.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "PUT"
                  type: "aws_proxy"

          /delete-task:
            delete:
              description: delete a task from the list.
              responses:
                "200":
                  description: deleted task successfully
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/UpdateTask'
                "400":
                  description: cannot delete task
                  content:
                    application/vnd.api+json:
                      schema:
                        $ref: '#/components/schemas/BadRequest'
              x-amazon-apigateway-integration:
                  uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TodoDeleteTask.Arn}/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "DELETE"
                  type: "aws_proxy"

        components:
          schemas:
            AddTask:
              type: object
              description: user task    
              properties:
                taskName:
                  type: string
                status:
                  type: string
            GetTask:
              type: object
              description: get all tasks
              properties:
                taskId:
                  type: string
                taskName:
                  type: string
                status:
                  type: string
            UpdateTask:
              type: object
              description: Update user task    
              properties:
                taskId:
                  type: string 
                taskName:
                  type: string
                status:
                  type: string  
            BadRequest:
              type: object
              properties:
                errors:
                    type: array
                    items:
                      type: object
                      properties:
                        details:
                          type: string
                          example: 'BadRequest'
                        status:
                          type: integer
                          example: 400  
                                       
      Name : todoTask  
  LambdaInvokePermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TodoCreateTask.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*/*

  LambdaInvokePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TodoTasksGET.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*/*

  LambdaInvokePermission3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TodoUpdateTask.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*/*

  LambdaInvokePermission4:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TodoDeleteTask.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TodoApi}/*/*/*

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref TodoApi

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TodoApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: todo

  Task:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Todo"
      AttributeDefinitions:
        - AttributeName: "taskId"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "taskId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "3"
        WriteCapacityUnits: "3"    
